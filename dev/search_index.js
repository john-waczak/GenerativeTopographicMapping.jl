var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GenerativeTopographicMapping","category":"page"},{"location":"#GenerativeTopographicMapping","page":"Home","title":"GenerativeTopographicMapping","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GenerativeTopographicMapping.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GenerativeTopographicMapping]","category":"page"},{"location":"#GenerativeTopographicMapping.GTM","page":"Home","title":"GenerativeTopographicMapping.GTM","text":"Module\n\nA model type for constructing a module, based on unknown.jl, and implementing the MLJ model interface.\n\nFrom MLJ, the type can be imported using\n\nModule = @load Module pkg=unknown\n\nDo model = Module() to construct an instance with default hyper-parameters. \n\nGenerativeTopographicMapping implements Generative Topographic Mapping, Neural Computation; Bishop, C.; (1998):\"GTM: The Generative Topographic Mapping\"\n\nTraining data\n\nIn MLJ or MLJBase, bind an instance model to data with     mach = machine(model, X) where\n\nX: an AbstractMatrix or Table of input features whose columns are of scitype Continuous.\n\nTrain the machine with fit!(mach, rows=...).\n\nHyper-parameters\n\nk=16: Number of nodes along once side of GTM latent grid. There are k² total nodes.\nm=4: Square root of the number of RBF functions in latent transformation. There are m² total RBFs.\nσ=0.3: Standard deviation for RBF functions in latent transformation.\nα=0.1  Model weight regularization parameter (0.0 for regularization)\ntol=0.0001 Tolerance used for determining convergence during expectation-maximization fitting.\nniter=200 Maximum number of iterations to use.\nnrepeats=4 Number of steps to repeat at/below tol before GTM is considered converged.\nrepresentation=:means Method to apply to fitted responsability matrix. One of (:means, :modes).\n\nOperations\n\ntransform(mach, X): returns the coordinates corresponding to mean latent node responsability or mode latent node responsability for each data point. This can be used as a two-dimensional representation of the original dataset X.\n\nFitted parameters\n\nThe fields of fitted_params(mach) are:\n\ngtm: The GenerativeTopographicMap object fit by the GTM model. Contains node coordinates, RbF means, RBF variance, weights, etc.\n\nReport\n\nThe fields of report(mach) are:\n\nclasses: the index of the mode node responsability for each datapoint in X interpreted as a class label\n\nExamples\n\nusing MLJ\ngtm = @load GTM pkg=GenerativeTopographicMapping\nmodel = gtm()\nX, y = make_blob(100, 10; centers=5) # synthetic data\nmach = machine(model, X) |> fit!\nX̃ = transform(mach, X)\n\nrpt = report(mach)\nclasses = rpt.classes\n\n\n\n\n\n","category":"type"},{"location":"#GenerativeTopographicMapping.GenerativeTopographicMap-NTuple{4, Any}","page":"Home","title":"GenerativeTopographicMapping.GenerativeTopographicMap","text":"GTM(k, m, σ, Dataset; α=0.0, tol=0.0001, verbose=false)\n\nInitialize hyperparameters for a GTM model.\n\nk: square root of the number of latent nodes\nm: square root of the number of RBF centers in latent space\nσ: standard deviation for latent space RBF functions\nDataset: dataset to fit GTM model to. Assumed shape is (n_datapoints, n_features)\nα: Weight regularization parameter (0.0 means no regularization)\ntol: absolute tolerance used during fitting.\nverbose: Set to true for extra print statements.\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.Posterior-Tuple{GenerativeTopographicMapping.GenerativeTopographicMap, Any}","page":"Home","title":"GenerativeTopographicMapping.Posterior","text":"Posterior(gtm::GenerativeTopographicMap)\n\nCompute a matrix of contributions to posterior probabilities. This is an intermediate result to facilitate computation of true posterior probabilities given by the responsability matrix R. The returned size is (nnodes, ndatapoints). The exp-normalize trick is used for numerical stability.\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.Responsabilities-Tuple{GenerativeTopographicMapping.GenerativeTopographicMap, Any}","page":"Home","title":"GenerativeTopographicMapping.Responsabilities","text":"Responsabilities(gtm::GenerativeTopographicMapping, Dataset)\n\nCompute matrix of responsabilities of each node in X to datapoints in Dataset. Return matrix is of size (n_nodes, n_datapoints).\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.estimateLogLikelihood-Tuple{GenerativeTopographicMapping.GenerativeTopographicMap, Any, Any}","page":"Home","title":"GenerativeTopographicMapping.estimateLogLikelihood","text":"estimateLogLikelihood(gtm::GenerativeTopographicMap, P, Dataset)\n\nCompute the log-likelihood of obtaining our data provided parameters W and β⁻¹.\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.fit!-Tuple{GenerativeTopographicMapping.GenerativeTopographicMap, Any}","page":"Home","title":"GenerativeTopographicMapping.fit!","text":"fit!(gtm::GenerativeTopographicMap, Dataset)\n\nFit an initialized generative topographic map gtm to a dataset Dataset.\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.getCoordsMatrix-Tuple{Int64}","page":"Home","title":"GenerativeTopographicMapping.getCoordsMatrix","text":"getCoordsMatrix(k::Int)\n\nGenerate a matrix of k² node coordinates on a regular grid with x -11 and y-1 1. \n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.getDMatrix-Tuple{GenerativeTopographicMapping.GenerativeTopographicMap, Any}","page":"Home","title":"GenerativeTopographicMapping.getDMatrix","text":"getDMatrix(gtm::GenerativeTopographicMap, Dataset)\n\nCompute pairwise distances between projected gaussian centers Y and data points in Dataset. Resulting size is (n_nodes, n_datapoints).\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.getGMatrix-Tuple{Any}","page":"Home","title":"GenerativeTopographicMapping.getGMatrix","text":"getGMatrix(R)\n\nCreate diagonal matrix G from responsability matrix R. Return size is (n_nodes, n_nodes).\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.getUMatrix-Tuple{Any}","page":"Home","title":"GenerativeTopographicMapping.getUMatrix","text":"getUMatrix(Dataset)\n\nPerform PCA on the Dataset and return a matrix U containing the first two principal components (first two columns of data covariance matrix) and the variance of the third principal component. Size of returned matrix U is (n_features, 2)\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.getYMatrix-Tuple{GenerativeTopographicMapping.GenerativeTopographicMap}","page":"Home","title":"GenerativeTopographicMapping.getYMatrix","text":"getYMatrix(gtm::GenerativeTopographicMap)\n\nCompute Gaussian centers in data space via Y=W*Φ'. Return size is (n_features, n_nodes).\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.get_means-Tuple{Any, Any}","page":"Home","title":"GenerativeTopographicMapping.get_means","text":"get_means(R, X)\n\nCompute responsability weighted mean node position: xtⱼ W β=Σⱼ Rᵢⱼxᵢ\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.get_modes-Tuple{Any, Any}","page":"Home","title":"GenerativeTopographicMapping.get_modes","text":"get_modes(R, X)\n\nCompute the node corresponding to the mode responsability for each data point.\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.getΦMatrix-Tuple{Any, Any, Any}","page":"Home","title":"GenerativeTopographicMapping.getΦMatrix","text":"getΦMatrix(X, M, σ²)\n\nGiven a matrix of latent node coordinates X, RBF mean coordinates M, and variance σ², return a matrix Φ of dimension (n_nodes, n_rbf_centers+1). The final column is set to 1.0 to include a bias offset in addition to the RBFs.\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.initWMatrix-Tuple{Any, Any, Any}","page":"Home","title":"GenerativeTopographicMapping.initWMatrix","text":"initWMatrix(X,Φ,U)\n\nInitialize parameter matrix W. Initial weights are chosen so that WΦ' reproduces PCA projections such that WΦ' ≈ UX'\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.initializeVariance-Tuple{Any, Any}","page":"Home","title":"GenerativeTopographicMapping.initializeVariance","text":"initializeVariance(σ::Float64, M::)\n\nInitilize RBF variance by combining supplied standard deviation with minimum RBF mean distance.\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.initβ⁻¹-Tuple{Any, Any}","page":"Home","title":"GenerativeTopographicMapping.initβ⁻¹","text":"initβ⁻¹(β⁻¹, Y)\n\nInitialized β⁻¹ using our first guess for β⁻¹ (from 3rd principal component variance) and the mean distance between projected rbf centers in data space.\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.updateBeta!-Tuple{GenerativeTopographicMapping.GenerativeTopographicMap, Any, Any}","page":"Home","title":"GenerativeTopographicMapping.updateBeta!","text":"updateBeta(R, D)\n\n\n\n\n\n","category":"method"},{"location":"#GenerativeTopographicMapping.updateW!-Tuple{GenerativeTopographicMapping.GenerativeTopographicMap, Any, Any}","page":"Home","title":"GenerativeTopographicMapping.updateW!","text":"updateW!(gtm::GenerativeTopographicMap, Dataset)\n\nUpdate model weights using responsability matrix.\n\n\n\n\n\n","category":"method"}]
}
